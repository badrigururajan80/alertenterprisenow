<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sn_hr_core_task</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sn_hr_core_task">short_descriptionSTARTSWITHAlertEnterprise:^EQ<item endquery="false" field="short_description" goto="false" newquery="false" operator="STARTSWITH" or="false" value="AlertEnterprise:"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>On Creation of AlertEnterprise Activity</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var currentActivity=current.short_description;
	gs.info("On Creation Of Activity:Current Activity:"+currentActivity+" number:"+current.number);
	var aeSetting = new GlideRecordSecure('x_aleen_alertenter_alertenterprise_settings');
	var enableWorkflow = "No";
	var onboardActivityName="";
	var offboardActivityName="";
	var onboardRequestCategory =""; 
	var offboardRequestCategory = "";
	var assignTo="";
	var assignToUser="";
	var assignToGroup="";
	var alertEnterpriseURL= "";
	var alertEnterpriseUserName="";
	var alertEnterprisePassword="";
	var defaultEndDate="";
	aeSetting.query();
	while(aeSetting.next()){
		onboardActivityName = aeSetting.onboarding_activity_name;
		offboardActivityName = aeSetting.offboarding_activity_name;
		if(current.short_description!=onboardActivityName &&
		   current.short_description!=offboardActivityName){
			gs.debug("On Creation Of Activity:Returning as doesnt match with onboard or offboard activity");
			return;
		}
		alertEnterpriseURL=aeSetting.alertenterprise_server_url;
		alertEnterpriseUserName=aeSetting.user_name;
		alertEnterprisePassword=aeSetting.password.getDecryptedValue();
		defaultEndDate=aeSetting.default_end_date;
		
		onboardRequestCategory=aeSetting.onboarding_identity_action;
		offboardRequestCategory=aeSetting.offboarding_identity_action;		
		enableWorkflow = aeSetting.enable_workflow;
		assignTo=aeSetting.assign_to;
		if(assignTo=="task assignee"){
				assignToUser = current.assigned_to;
		}
		if(assignTo=="task assignee group"){
				assignToGroup = current.assignment_group;
		}
		else  if (assignTo=="user"){
				assignToUser = aeSetting.assign_to_user;
		} else if (assignTo=="group"){
				assignToGroup = aeSetting.assign_to_group;
		}
		break;
	}
	
	var taskSysId=current.sys_id;
	var aeUserInfo = new GlideRecordSecure('x_aleen_alertenter_alertenterprise_user_info');
	var userInfoSysId;
	if(current.short_description==onboardActivityName){
		gs.debug("On Creation Of Activity:Onboard Activity");
		aeUserInfo.initialize();
		aeUserInfo.subject_person = current.parent.subject_person;
		aeUserInfo.alert_task=taskSysId;
		var startDate = current.parent.subject_person_hr_profile.employment_start_date;
		var endDate = current.parent.subject_person_hr_profile.employment_end_date;
		var employeeNumber=current.parent.subject_person_hr_profile.employee_number;
		aeUserInfo.start_date = startDate;
		aeUserInfo.end_date = endDate;
		aeUserInfo.emp_number = employeeNumber;
		if(enableWorkflow=="Yes" || enableWorkflow=="onboarding"){
			gs.debug("On Creation Of Activity:Onboarding Workflow Enabled");
			aeUserInfo.onboard_approval_status="Pending Approval";
			aeUserInfo.alert_status="Not Provisioned";
			if(assignToUser!="")
				aeUserInfo.assign_to_user=assignToUser;
			if(assignToGroup!="")
				aeUserInfo.assign_to_group=assignToGroup;
			
			userInfoSysId = aeUserInfo.insert();
			var aeApprovalTask = new GlideRecordSecure('x_aleen_alertenter_alertenterprise_activity_approval_task');
			aeApprovalTask.alert_user_info = userInfoSysId;
			if(assignToUser!="")
				aeApprovalTask.assigned_to=assignToUser;
			if(assignToGroup!="")
				aeApprovalTask.assignment_group=assignToGroup;
			aeApprovalTask.approval_type="Onboard";
			aeApprovalTask.approval_status="Pending Approval";
			aeApprovalTask.short_description=current.short_description;
			aeApprovalTask.description="This task is created as part of Onboarding Request. Upon approval user will be assigned a badge to have Physical Access to locations based on Policy";
			aeApprovalTask.insert();
			
		} else {
			gs.debug("On Creation Of Activity:Onboard Approval Not Required");
			aeUserInfo.onboard_approval_status="Not Required";
			aeUserInfo.alert_status="Provisioning InProgress";
			userInfoSysId = aeUserInfo.insert();
			gs.debug("Userinfo sys Id :"+ userInfoSysId);
			var userName = current.parent.subject_person.user_name;
			var firstName = current.parent.subject_person.first_name;
			var lastName = current.parent.subject_person.last_name;
			var middleName = current.parent.subject_person.middle_name;
			var gender = current.parent.subject_person.gender;
			var managerName = current.parent.subject_person.manager.user_name;
			var title = current.parent.subject_person.title;
			var department = current.parent.subject_person.department.name;
			var email = current.parent.subject_person.email;
			var businessPhone = current.parent.subject_person.phone;
			var mobilePhone = current.parent.subject_person.mobile_phone;
			var homePhone = current.parent.subject_person.home_phone;
			var location = current.parent.subject_person.location.name;
	
			
			var empStartDateTime=new GlideDateTime(startDate);
			var empStartDate = empStartDateTime.getDate().getByFormat("yyyy-MM-dd");
			var empStartTime = empStartDateTime.getTime().getByFormat("HH:mm:ss.SSS");
			
			var empStartDateTimeStr = empStartDate+'T'+empStartTime+'Z';
			var empEndDateTimeStr ="";
		
			var empEndDateTimeFld=endDate;
			if(empEndDateTimeFld!=null && empEndDateTimeFld!=""){
				var empEndDateTime=new GlideDateTime(empEndDateTimeFld);
				var empEndDate = empEndDateTime.getDate().getByFormat("yyyy-MM-dd");
				var empEndTime = empEndDateTime.getTime().getByFormat("HH:mm:ss.SSS");
			
				empEndDateTimeStr = empEndDate+'T'+empEndTime+'Z';
			} else {
				//var empDefaultEndDateTime=new GlideDateTime(defaultEndDate);
				var empDefaultEndDate = "9999-12-30"; //empDefaultEndDateTime.getDate().getByFormat("yyyy-MM-dd");
				var empDefaultEndTime = "23:59:00.000";			
				empEndDateTimeStr = empDefaultEndDate+'T'+empDefaultEndTime+'Z';
			}
			
			
			
			var requestBody1 = '{"userName":"'+ userName+'", "FirstName":"' +firstName+'","MiddleName":"'+ middleName+
				'","LastName":"'+ lastName+'", "Gender":"'+ gender+
				'","ManagerName":"'+ managerName+'", "Title":"'+ title+
				'","Department":"'+ department+'", "Email":"'+ email+
				'","businessPhone":"'+ businessPhone+'", "mobilePhone":"'+ mobilePhone+
				'","homePhone":"'+ homePhone+'", "ServiceNowLocation":"'+ location+
				'","ValidFrom":"'+empStartDateTimeStr+'","ValidTo":"'+empEndDateTimeStr+'",'+
							  '"empNumber": "'+employeeNumber+'","userInfoSysId":"'+userInfoSysId+'","identityAction":"'+onboardRequestCategory+
				'","TSCapplicationSubmit":"Yes","AirportTraining":"Yes"}';
			var requestBody =requestBody1.toString();
			var responseBody;
			var status;
			var sm;
			try{
				gs.info("On Creation Of Activity:Before execution of Onboard Rest API:"+current.number);
				sm = new sn_ws.RESTMessageV2();
				sm.setEndpoint(alertEnterpriseURL);
				sm.setHttpMethod("POST");
				sm.setRequestHeader("Content-Type","application/json");
				// Might throw exception if message doesn't exist or not visible due to scope.
				sm.setBasicAuth(alertEnterpriseUserName,alertEnterprisePassword);
				sm.setRequestBody(requestBody);
				sm.executeAsync(); //Might throw exception if http connection timed 
				//out or some issue with sending request itself because of encryption/decryption 
				//of password.
				gs.info("On Creation Of Activity:Async execution of Onboard Rest API");
				
			} catch(ex) {
				responseBody = ex.getMessage();
				status = '500';
				gs.info("Calling of AlertEnterprise application failed for:"+firstName+":"+lastName);
			} finally {
				requestBody = sm ? sm.getRequestBody():null;
			}
		
		
			
		
			gs.debug("Fields are:"+ requestBody);
			
		}
	} else if(current.short_description==offboardActivityName){
		gs.debug("On Creation Of Activity:Offboard Activity:"+offboardActivityName);
		
		var userSysId = current.parent.subject_person;
		aeUserInfo.addQuery('subject_person',userSysId);
		aeUserInfo.addQuery('alert_status','Provisioned');
		aeUserInfo.query();
		var found = false;
		while(aeUserInfo.next()){
			found = true;
			gs.debug("On Creation Of Activity:Offboard Task Activity:Record Found");
			aeUserInfo.alert_task=taskSysId;
			gs.debug("Enable Workflow"+enableWorkflow);
			if(enableWorkflow=="Yes" || enableWorkflow=="offboarding"){
				gs.debug("On Creation Of Activity:Offboard workflow enabled");
				aeUserInfo.offboard_approval_status="Pending Approval";
				aeUserInfo.alert_status="Pending Termination";
				var aeApprovalOffBoardTask = new GlideRecordSecure('x_aleen_alertenter_alertenterprise_activity_approval_task');
				gs.debug("Offboard after glide record");
			aeApprovalOffBoardTask.alert_user_info = aeUserInfo.sys_id;
				gs.debug("Offboard after alert user info");
			if(assignToUser!="")
				aeApprovalOffBoardTask.assigned_to=assignToUser;
			if(assignToGroup!="")
				aeApprovalOffBoardTask.assignment_group=assignToGroup;
			gs.debug("After assign");
			aeApprovalOffBoardTask.approval_type="Offboard";
			aeApprovalOffBoardTask.approval_status="Pending Approval";
			aeApprovalOffBoardTask.short_description=current.short_description;
			aeApprovalOffBoardTask.description="This task is created as part of Offboarding Request. Upon approval user's badge will be removed and all physical access will be removed";
				
			aeApprovalOffBoardTask.insert();
				gs.debug("On Creation Of Activity:After Insert");
				if(assignToUser!="")
					aeUserInfo.assign_to_user=assignToUser;
				if(assignToGroup!="")
					aeUserInfo.assign_to_group=assignToGroup;
				aeUserInfo.update();
				gs.debug("On Creation Of Activity:After Update");
			} else {
				gs.debug("On Creation Of Activity:Offboard workflow not enabled");
				aeUserInfo.offboard_approval_status="Not Required";
				aeUserInfo.alert_status="Termination InProgress";
				aeUserInfo.update();
				var termRequestBody = '{"UserId":"'+aeUserInfo.alert_user_id+'",'+
					'"identityAction":"'+offboardRequestCategory+'"}';
				
				var smt;
				try{
					gs.debug("On Creation Of Activity:Before calling Offboard rest API");
					smt = new sn_ws.RESTMessageV2();
					smt.setEndpoint(alertEnterpriseURL);
					smt.setHttpMethod("POST");
					smt.setRequestHeader("Content-Type","application/json");
					// Might throw exception if message doesn't exist or not visible due to scope.
					smt.setBasicAuth(alertEnterpriseUserName,alertEnterprisePassword);
					smt.setRequestBody(termRequestBody);
					smt.executeAsync(); //Might throw exception if http connection timed 
					//out or some issue with sending request itself because of encryption/decryption 
					//of password.
					gs.info("On Creation Of Activity:Async execution of Offboard Rest API");

				} catch(ex) {
					responseBody = ex.getMessage();
					status = '500';
					gs.info("Calling of AlertEnterprise application failed for termination of :"+aeUserInfo.alert_user_id);
				} finally {
					termRequestBody = smt ? smt.getRequestBody():null;
				}
				//Call AE API
				
				
			}
			
		} 
		
		
		
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-01 08:37:23</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e6b99dd5db502340adac9f5faa961917</sys_id>
        <sys_mod_count>51</sys_mod_count>
        <sys_name>On Creation of AlertEnterprise Activity</sys_name>
        <sys_overrides/>
        <sys_package display_value="AlertEnterpriseNow" source="x_aleen_alertenter">d2864ddddbdcef00adac9f5faa96198a</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AlertEnterpriseNow">d2864ddddbdcef00adac9f5faa96198a</sys_scope>
        <sys_update_name>sys_script_e6b99dd5db502340adac9f5faa961917</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-06-07 07:39:25</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e6b99dd5db502340adac9f5faa961917"/>
</record_update>
